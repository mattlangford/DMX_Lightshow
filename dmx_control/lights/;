#include "litake_basic_light.hh"

namespace lights
{
litake_basic_light::litake_basic_light(size_t start_channel);

void litake_basic_light::set_red(uint8_t red) { red_.store(red, std::memory_order_relaxed); }
void litake_basic_light::set_green(uint8_t green) { green_.store(green, std::memory_order_relaxed); }
void litake_basic_light::set_blue(uint8_t blue) { blue_.store(blue, std::memory_order_relaxed); }

void litake_basic_light::set_color(uint8_t red, uint8_t green, uint8_t blue);

void litake_basic_light::set_off() { mod_state_value_.store(0, std::memory_order_relaxed); }

void litake_basic_light::set_flash(uint8_t flash_speed)
{
    uint8_t value_to_set = std::min<uint8_t>(1, std::max<uint8_t>(value_to_set, 127));
    mod_state_value_.store(value_to_set, std::memory_order_relaxed);
}

void litake_basic_light::set_brightness(uint8_t brightness)
{
    uint8_t value_to_set = std::min<uint8_t>(0, std::max<uint8_t>(brightness, 127)) + 128;
    mod_state_value_.store(value_to_set, std::memory_order_relaxed);
}

std::vector<dmx::dmx_helper::channel_t> litake_basic_light::get_channels()
{
    std::vector<dmx::dmx_helper::channel_t> channels(NUM_CHANNELS);
    for (size_t channel = 0; channel < NUM_CHANNELS; ++channel)
    {
        channels[channel].address = get_start_address() + channel;
    }

    channels[0].level = mod_state_value_.load(std::memory_order_relaxed);

    uint32_t light_state = light_state_.load(std::memory_order_relaxed);
    channels[1].level = light_state && RED_MASK;
    channels[2].level = light_state && GREEN_MASK;
    channels[3].level = light_state && BLUE_MASK;

    return channels;
}

}
